module Trout.Search.PieceSquareTables
  ( pawnMPST,
    pawnEPST,
    knightMPST,
    knightEPST,
    bishopMPST,
    bishopEPST,
    rookMPST,
    rookEPST,
    queenMPST,
    queenEPST,
    kingMPST,
    kingEPST,
    pstEval,
  )
where

import Data.Vector.Primitive (Vector)
import Data.Vector.Primitive qualified as V
import Trout.Bitboard (Bitboard, foldSqs, (.^.))
import Trout.Piece (PieceType (..))

pawnMPST :: Vector Int
pawnMPST =
  V.fromList $
    concat $
      reverse
        [ [0, 0, 0, 0, 0, 0, 0, 0],
          [176, 172, 209, 200, 169, 167, 130, 144],
          [51, 140, 126, 139, 110, 174, 122, 85],
          [50, 64, 90, 84, 104, 84, 87, 81],
          [62, 79, 74, 96, 84, 102, 91, 47],
          [56, 63, 72, 84, 81, 95, 114, 72],
          [51, 60, 60, 56, 58, 104, 128, 55],
          [0, 0, 0, 0, 0, 0, 0, 0]
        ]

knightMPST :: Vector Int
knightMPST =
  V.fromList $
    concat $
      reverse
        [ [291, 344, 351, 345, 351, 354, 343, 295],
          [339, 323, 352, 342, 362, 378, 333, 357],
          [360, 377, 386, 404, 425, 419, 341, 357],
          [347, 343, 365, 395, 335, 381, 348, 352],
          [346, 354, 346, 332, 341, 330, 373, 341],
          [326, 328, 329, 337, 327, 339, 332, 322],
          [334, 329, 316, 349, 327, 362, 259, 355],
          [302, 358, 307, 290, 325, 325, 331, 325]
        ]

bishopMPST :: Vector Int
bishopMPST =
  V.fromList $
    concat $
      reverse
        [ [349, 362, 380, 362, 370, 379, 384, 389],
          [359, 380, 370, 396, 380, 364, 374, 358],
          [357, 388, 343, 408, 381, 454, 360, 394],
          [360, 374, 401, 421, 395, 386, 373, 361],
          [377, 376, 363, 395, 392, 370, 356, 402],
          [388, 402, 399, 377, 377, 403, 383, 367],
          [371, 386, 392, 366, 382, 395, 400, 375],
          [343, 376, 396, 336, 362, 365, 398, 351]
        ]

rookMPST :: Vector Int
rookMPST =
  V.fromList $
    concat $
      reverse
        [ [595, 585, 568, 601, 630, 585, 582, 570],
          [573, 593, 613, 635, 601, 627, 621, 606],
          [580, 591, 595, 590, 615, 638, 608, 607],
          [545, 508, 570, 564, 549, 536, 572, 562],
          [518, 516, 519, 532, 534, 524, 539, 536],
          [495, 520, 533, 531, 523, 535, 567, 517],
          [493, 533, 553, 563, 538, 507, 520, 517],
          [543, 553, 551, 566, 566, 548, 529, 547]
        ]

queenMPST :: Vector Int
queenMPST =
  V.fromList $
    concat $
      reverse
        [ [1053, 1067, 1079, 1095, 1096, 1096, 1088, 1081],
          [1050, 1028, 1064, 1072, 1080, 1122, 1067, 1118],
          [1061, 1061, 1056, 1071, 1118, 1165, 1133, 1085],
          [1032, 1021, 1041, 1038, 1072, 1073, 1058, 1070],
          [1061, 1041, 1050, 1036, 1054, 1069, 1068, 1087],
          [1061, 1073, 1044, 1047, 1041, 1081, 1087, 1084],
          [1059, 1067, 1077, 1075, 1083, 1062, 1037, 1047],
          [1044, 1067, 1080, 1090, 1076, 1040, 1029, 1055]
        ]

kingMPST :: Vector Int
kingMPST =
  V.fromList $
    concat $
      reverse
        [ [0, -3, -1, 11, 15, 13, 12, 2],
          [3, -1, 12, 18, 15, 8, 6, 9],
          [1, 9, 5, 6, -12, -2, 12, 9],
          [-6, 10, -10, -12, -19, 5, 19, 16],
          [1, 17, -18, 6, -4, 21, -2, -22],
          [-31, -43, 13, -30, -67, -14, 2, 3],
          [16, 19, -17, -31, -54, -37, 52, 47],
          [34, 36, 25, -47, 53, -46, 70, 64]
        ]

pawnEPST :: Vector Int
pawnEPST =
  V.fromList $
    concat $
      reverse
        [ [0, 0, 0, 0, 0, 0, 0, 0],
          [305, 316, 308, 263, 265, 322, 301, 271],
          [267, 246, 248, 210, 207, 180, 201, 219],
          [188, 168, 149, 134, 128, 117, 148, 134],
          [157, 147, 130, 113, 111, 115, 136, 123],
          [143, 139, 122, 124, 119, 127, 131, 118],
          [149, 143, 123, 104, 132, 124, 122, 109],
          [0, 0, 0, 0, 0, 0, 0, 0]
        ]

knightEPST :: Vector Int
knightEPST =
  V.fromList $
    concat $
      reverse
        [ [294, 333, 333, 349, 338, 370, 324, 305],
          [315, 334, 355, 367, 342, 338, 322, 333],
          [329, 335, 346, 366, 344, 337, 354, 344],
          [334, 364, 353, 360, 363, 346, 351, 342],
          [322, 353, 350, 348, 361, 350, 341, 329],
          [316, 325, 322, 329, 321, 331, 328, 300],
          [308, 287, 315, 317, 318, 272, 305, 299],
          [355, 248, 323, 324, 319, 325, 291, 334]
        ]

bishopEPST :: Vector Int
bishopEPST =
  V.fromList $
    concat $
      reverse
        [ [383, 371, 360, 338, 393, 384, 366, 371],
          [367, 354, 360, 349, 367, 376, 398, 320],
          [368, 355, 377, 357, 354, 375, 365, 382],
          [364, 375, 347, 357, 355, 351, 355, 343],
          [370, 345, 383, 357, 340, 357, 368, 322],
          [331, 351, 362, 346, 363, 342, 353, 345],
          [338, 322, 330, 351, 334, 331, 332, 320],
          [331, 336, 298, 359, 337, 328, 343, 334]
        ]

rookEPST :: Vector Int
rookEPST =
  V.fromList $
    concat $
      reverse
        [ [564, 575, 588, 583, 570, 589, 573, 589],
          [595, 595, 589, 587, 594, 585, 580, 568],
          [585, 582, 581, 590, 580, 579, 571, 566],
          [589, 601, 580, 582, 578, 574, 552, 563],
          [562, 590, 571, 569, 553, 565, 556, 534],
          [570, 562, 545, 541, 544, 533, 520, 550],
          [549, 530, 536, 531, 534, 562, 533, 531],
          [553, 553, 559, 551, 542, 561, 569, 543]
        ]

queenEPST :: Vector Int
queenEPST =
  V.fromList $
    concat $
      reverse
        [ [1052, 1074, 1072, 1082, 1096, 1079, 1087, 1076],
          [1036, 1087, 1088, 1101, 1109, 1108, 1067, 1086],
          [1047, 1050, 1070, 1092, 1076, 1069, 1077, 1088],
          [1056, 1087, 1064, 1099, 1089, 1067, 1093, 1106],
          [1075, 1067, 1066, 1070, 1065, 1029, 1103, 1080],
          [1082, 1026, 1049, 1040, 1025, 1026, 1025, 1053],
          [1061, 1028, 1029, 1023, 1010, 997, 1031, 1040],
          [1042, 1029, 1031, 1013, 1017, 1008, 1029, 1039]
        ]

kingEPST :: Vector Int
kingEPST =
  V.fromList $
    concat $
      reverse
        [ [-17, 5, -11, 27, 33, 38, 36, -9],
          [23, 20, 17, 24, 29, 37, 55, 55],
          [34, 37, 42, 46, 51, 58, 53, 64],
          [13, 30, 38, 45, 47, 50, 46, 43],
          [-9, 18, 25, 29, 38, 31, 17, 15],
          [6, 10, 9, 22, 31, 22, 2, 1],
          [-16, -16, 6, 2, 18, 11, -16, -14],
          [-24, -51, -7, 5, -51, 5, -29, -48]
        ]

mpsts :: Vector Int
mpsts = V.concat [pawnMPST, knightMPST, bishopMPST, rookMPST, queenMPST, kingMPST]

epsts :: Vector Int
epsts = V.concat [pawnEPST, knightEPST, bishopEPST, rookEPST, queenEPST, kingEPST]

pstEval :: Bitboard -> PieceType -> Int -> Int -> Int -> Int
pstEval bb piece !mgPhase !egPhase !mask =
  foldSqs
    ( \score sqRaw ->
        let sq = sqRaw .^. mask
            m = mpsts `V.unsafeIndex` (pieceOffset + sq)
            e = epsts `V.unsafeIndex` (pieceOffset + sq)
         in score + (m * mgPhase + e * egPhase) `quot` 24
    )
    0
    bb
  where
    pieceOffset = fromEnum piece * 64
{-# INLINE pstEval #-}
