module Trout.Search.PieceSquareTables
  ( pawnMPST,
    pawnEPST,
    knightMPST,
    knightEPST,
    bishopMPST,
    bishopEPST,
    rookMPST,
    rookEPST,
    queenMPST,
    queenEPST,
    kingMPST,
    kingEPST,
    pstEval,
  )
where

import Data.Vector.Primitive (Vector)
import Data.Vector.Primitive qualified as V
import Trout.Bitboard (Bitboard, foldSqs, (.^.))
import Trout.Piece (PieceType (..))

pawnMPST :: Vector Int
pawnMPST =
  V.fromList $
    concat $
      reverse $
        [ [100, 100, 100, 100, 100, 100, 100, 100],
          [144, 143, 169, 170, 143, 146, 115, 125],
          [55, 123, 114, 118, 71, 169, 97, 59],
          [53, 54, 87, 74, 83, 76, 91, 59],
          [62, 67, 78, 86, 89, 90, 65, 53],
          [54, 70, 63, 90, 74, 94, 102, 69],
          [64, 61, 57, 63, 78, 99, 122, 62],
          [100, 100, 100, 100, 100, 100, 100, 100]
        ]

knightMPST :: Vector Int
knightMPST =
  V.fromList $
    concat $
      reverse $
        [ [255, 295, 302, 298, 301, 307, 295, 255],
          [293, 274, 301, 285, 305, 325, 289, 310],
          [314, 323, 326, 331, 352, 353, 288, 311],
          [311, 293, 317, 324, 302, 329, 302, 295],
          [286, 297, 298, 298, 301, 284, 323, 291],
          [273, 281, 290, 284, 280, 303, 289, 265],
          [318, 292, 275, 306, 302, 336, 215, 298],
          [262, 306, 262, 246, 276, 281, 294, 285]
        ]

bishopMPST :: Vector Int
bishopMPST =
  V.fromList $
    concat $
      reverse $
        [ [301, 312, 328, 312, 324, 328, 330, 336],
          [324, 332, 327, 342, 331, 311, 327, 307],
          [297, 336, 279, 343, 323, 377, 300, 333],
          [316, 306, 353, 355, 342, 340, 325, 294],
          [319, 326, 307, 332, 342, 321, 305, 367],
          [347, 347, 344, 327, 330, 343, 339, 315],
          [331, 341, 348, 321, 337, 330, 362, 333],
          [297, 318, 347, 285, 311, 332, 352, 302]
        ]

rookMPST :: Vector Int
rookMPST =
  V.fromList $
    concat $
      reverse $
        [ [511, 493, 478, 509, 542, 499, 500, 488],
          [494, 509, 517, 536, 505, 534, 526, 517],
          [516, 509, 513, 500, 523, 547, 520, 522],
          [475, 437, 485, 474, 468, 461, 507, 490],
          [470, 438, 462, 447, 459, 456, 470, 471],
          [431, 455, 478, 460, 465, 472, 494, 448],
          [430, 465, 492, 480, 472, 422, 444, 454],
          [462, 473, 471, 483, 476, 466, 455, 466]
        ]

queenMPST :: Vector Int
queenMPST =
  V.fromList $
    concat $
      reverse $
        [ [903, 925, 925, 938, 935, 937, 933, 924],
          [901, 883, 913, 920, 928, 957, 906, 950],
          [921, 920, 921, 935, 962, 1013, 964, 927],
          [889, 886, 904, 898, 927, 926, 912, 913],
          [902, 897, 890, 890, 891, 926, 916, 942],
          [913, 914, 894, 901, 900, 928, 933, 946],
          [912, 927, 919, 929, 920, 918, 889, 902],
          [895, 911, 931, 940, 927, 898, 888, 907]
        ]

kingMPST :: Vector Int
kingMPST =
  V.fromList $
    concat $
      reverse $
        [ [0, -3, -1, 10, 13, 12, 10, 2],
          [2, -2, 7, 14, 12, 5, 6, 9],
          [-1, 8, 6, 4, -8, 0, 9, 9],
          [-6, 9, -7, -10, -14, 3, 16, 14],
          [0, 16, -16, 5, -7, 16, -4, -14],
          [-28, -41, 9, -26, -60, -13, -2, 9],
          [11, 16, -12, -16, -43, -17, 34, 27],
          [36, 37, 20, -38, 40, -36, 69, 46]
        ]

pawnEPST :: Vector Int
pawnEPST =
  V.fromList $
    concat $
      reverse $
        [ [100, 100, 100, 100, 100, 100, 100, 100],
          [277, 286, 242, 234, 232, 294, 257, 226],
          [244, 224, 227, 188, 183, 190, 183, 189],
          [173, 157, 144, 135, 123, 109, 134, 136],
          [147, 138, 119, 105, 104, 114, 127, 129],
          [140, 112, 121, 125, 117, 119, 126, 110],
          [137, 125, 117, 101, 100, 99, 105, 98],
          [100, 100, 100, 100, 100, 100, 100, 100]
        ]

knightEPST :: Vector Int
knightEPST =
  V.fromList $
    concat $
      reverse $
        [ [256, 284, 286, 306, 289, 322, 279, 264],
          [275, 289, 320, 309, 286, 295, 278, 293],
          [293, 288, 287, 309, 286, 287, 307, 300],
          [290, 324, 294, 300, 313, 303, 297, 298],
          [279, 302, 293, 290, 312, 302, 304, 293],
          [273, 288, 283, 272, 276, 277, 293, 255],
          [284, 249, 279, 260, 273, 232, 257, 258],
          [312, 213, 283, 279, 283, 294, 261, 296]
        ]

bishopEPST :: Vector Int
bishopEPST =
  V.fromList $
    concat $
      reverse $
        [ [332, 320, 314, 286, 354, 332, 316, 323],
          [325, 311, 304, 299, 329, 317, 349, 275],
          [309, 304, 336, 307, 300, 332, 311, 327],
          [317, 326, 298, 315, 305, 312, 295, 283],
          [319, 298, 341, 294, 300, 312, 318, 283],
          [291, 297, 296, 290, 309, 300, 315, 300],
          [301, 280, 279, 308, 302, 285, 294, 278],
          [282, 286, 273, 314, 291, 285, 305, 290]
        ]

rookEPST :: Vector Int
rookEPST =
  V.fromList $
    concat $
      reverse $
        [ [491, 483, 488, 496, 490, 498, 494, 505],
          [501, 493, 512, 508, 517, 498, 494, 486],
          [496, 484, 495, 511, 495, 488, 486, 480],
          [498, 514, 491, 497, 488, 487, 481, 484],
          [483, 500, 498, 489, 473, 481, 475, 452],
          [493, 483, 467, 460, 470, 458, 448, 475],
          [486, 470, 459, 467, 462, 483, 453, 462],
          [472, 486, 485, 482, 469, 488, 486, 470]
        ]

queenEPST :: Vector Int
queenEPST =
  V.fromList $
    concat $
      reverse $
        [ [902, 932, 917, 927, 931, 922, 935, 921],
          [885, 927, 929, 943, 949, 949, 913, 929],
          [901, 904, 922, 947, 923, 931, 926, 932],
          [910, 935, 913, 946, 942, 908, 941, 948],
          [919, 917, 912, 919, 911, 884, 951, 931],
          [932, 884, 903, 891, 886, 884, 885, 911],
          [915, 887, 890, 901, 869, 864, 890, 896],
          [897, 885, 895, 865, 884, 871, 889, 895]
        ]

kingEPST :: Vector Int
kingEPST =
  V.fromList $
    concat $
      reverse $
        [ [-11, 7, -11, 25, 32, 38, 33, -7],
          [20, 13, 4, 19, 27, 29, 49, 64],
          [21, 32, 37, 35, 46, 61, 39, 67],
          [8, 30, 40, 47, 48, 42, 36, 39],
          [-11, 28, 32, 24, 23, 12, 4, 18],
          [6, 12, 6, 19, 22, 12, 0, -8],
          [-14, -9, 3, 3, 23, 16, -13, -5],
          [-11, -43, -10, -6, -51, -8, -27, -52]
        ]

mpsts :: Vector Int
mpsts = V.concat [pawnMPST, knightMPST, bishopMPST, rookMPST, queenMPST, kingMPST]

epsts :: Vector Int
epsts = V.concat [pawnEPST, knightEPST, bishopEPST, rookEPST, queenEPST, kingEPST]

pstEval :: Bitboard -> PieceType -> Int -> Int -> Int -> Int
pstEval bb piece !mgPhase !egPhase !mask =
  foldSqs
    ( \score sqRaw ->
        let sq = sqRaw .^. mask
            m = mpsts `V.unsafeIndex` (pieceOffset + sq)
            e = epsts `V.unsafeIndex` (pieceOffset + sq)
         in score + (m * mgPhase + e * egPhase) `quot` 24
    )
    0
    bb
  where
    pieceOffset = fromEnum piece * 64
{-# INLINE pstEval #-}
