module Trout.Search.PieceSquareTables
  ( pawnMPST,
    pawnEPST,
    knightMPST,
    knightEPST,
    bishopMPST,
    bishopEPST,
    rookMPST,
    rookEPST,
    queenMPST,
    queenEPST,
    kingMPST,
    kingEPST,
    pstEval,
  )
where

import Data.Vector.Primitive (Vector)
import Data.Vector.Primitive qualified as V
import Trout.Bitboard (Bitboard, foldSqs, (.^.))
import Trout.Piece (PieceType (..))

pawnMPST :: Vector Int
pawnMPST =
  V.fromList $
    concat $
      reverse
        [ [111, 111, 111, 111, 111, 111, 111, 111],
          [168, 163, 200, 190, 162, 160, 126, 139],
          [51, 136, 119, 134, 100, 172, 115, 81],
          [44, 58, 92, 82, 95, 86, 88, 84],
          [57, 77, 75, 89, 86, 93, 89, 44],
          [55, 55, 71, 83, 76, 93, 112, 71],
          [53, 64, 56, 53, 54, 97, 123, 50],
          [111, 111, 111, 111, 111, 111, 111, 111]
        ]

knightMPST :: Vector Int
knightMPST =
  V.fromList $
    concat $
      reverse
        [ [280, 329, 336, 330, 335, 339, 328, 283],
          [324, 307, 336, 326, 344, 362, 319, 341],
          [344, 361, 370, 387, 403, 399, 326, 340],
          [335, 330, 349, 375, 323, 362, 331, 334],
          [335, 337, 335, 320, 325, 319, 358, 329],
          [314, 315, 319, 320, 312, 327, 313, 304],
          [324, 315, 299, 333, 314, 351, 246, 337],
          [289, 339, 295, 275, 312, 312, 317, 312]
        ]

bishopMPST :: Vector Int
bishopMPST =
  V.fromList $
    concat $
      reverse
        [ [334, 346, 364, 347, 355, 363, 367, 372],
          [344, 364, 355, 379, 364, 349, 358, 343],
          [340, 371, 325, 389, 364, 434, 343, 376],
          [343, 353, 385, 402, 380, 370, 358, 343],
          [362, 358, 347, 378, 371, 364, 340, 385],
          [372, 386, 380, 362, 359, 388, 367, 349],
          [353, 370, 381, 348, 370, 383, 393, 359],
          [328, 357, 376, 320, 345, 355, 382, 336]
        ]

rookMPST :: Vector Int
rookMPST =
  V.fromList $
    concat $
      reverse
        [ [569, 558, 541, 575, 603, 559, 556, 545],
          [548, 569, 585, 606, 573, 599, 593, 580],
          [559, 565, 570, 565, 588, 610, 582, 581],
          [523, 484, 544, 540, 524, 512, 548, 538],
          [495, 495, 495, 507, 510, 502, 515, 513],
          [473, 498, 511, 511, 501, 511, 549, 495],
          [473, 511, 530, 536, 515, 483, 497, 497],
          [521, 530, 527, 543, 541, 524, 503, 520]
        ]

queenMPST :: Vector Int
queenMPST =
  V.fromList $
    concat $
      reverse
        [ [1007, 1021, 1032, 1048, 1048, 1047, 1040, 1033],
          [1004, 985, 1016, 1026, 1032, 1071, 1019, 1067],
          [1015, 1015, 1011, 1025, 1070, 1117, 1085, 1039],
          [986, 975, 997, 993, 1026, 1023, 1012, 1021],
          [1007, 996, 1001, 989, 1005, 1026, 1019, 1039],
          [1015, 1025, 1000, 1004, 998, 1038, 1044, 1036],
          [1013, 1021, 1035, 1027, 1040, 1012, 991, 1002],
          [998, 1022, 1035, 1050, 1029, 996, 985, 1009]
        ]

kingMPST :: Vector Int
kingMPST =
  V.fromList $
    concat $
      reverse
        [ [0, -3, -1, 11, 14, 12, 11, 2],
          [3, -1, 11, 17, 14, 7, 6, 9],
          [1, 9, 6, 6, -11, -2, 11, 9],
          [-6, 10, -9, -11, -17, 5, 19, 15],
          [1, 16, -18, 5, -4, 20, -2, -20],
          [-29, -42, 12, -28, -66, -13, 1, 3],
          [16, 17, -16, -30, -52, -35, 47, 46],
          [35, 40, 25, -43, 46, -42, 66, 55]
        ]

pawnEPST :: Vector Int
pawnEPST =
  V.fromList $
    concat $
      reverse
        [ [111, 111, 111, 111, 111, 111, 111, 111],
          [295, 306, 296, 252, 255, 311, 290, 260],
          [260, 238, 241, 203, 197, 181, 193, 214],
          [180, 155, 146, 131, 120, 121, 144, 135],
          [153, 145, 127, 107, 106, 111, 133, 121],
          [144, 134, 120, 126, 110, 120, 129, 118],
          [140, 133, 122, 98, 126, 121, 114, 107],
          [111, 111, 111, 111, 111, 111, 111, 111]
        ]

knightEPST :: Vector Int
knightEPST =
  V.fromList $
    concat $
      reverse
        [ [282, 318, 319, 334, 323, 355, 310, 292],
          [302, 318, 340, 350, 326, 324, 308, 319],
          [315, 321, 329, 352, 328, 322, 339, 330],
          [321, 349, 335, 343, 350, 333, 332, 327],
          [310, 336, 334, 333, 347, 337, 328, 316],
          [303, 312, 305, 312, 304, 320, 315, 286],
          [296, 274, 300, 304, 304, 260, 291, 285],
          [340, 235, 311, 309, 308, 313, 279, 321]
        ]

bishopEPST :: Vector Int
bishopEPST =
  V.fromList $
    concat $
      reverse
        [ [367, 355, 345, 323, 378, 367, 351, 355],
          [351, 339, 344, 334, 353, 360, 380, 307],
          [351, 340, 359, 341, 337, 359, 347, 366],
          [347, 361, 331, 346, 340, 336, 339, 327],
          [356, 332, 370, 340, 325, 342, 353, 309],
          [317, 339, 343, 329, 348, 329, 341, 329],
          [324, 308, 316, 339, 323, 317, 320, 306],
          [316, 320, 285, 345, 321, 314, 328, 320]
        ]

rookEPST :: Vector Int
rookEPST =
  V.fromList $
    concat $
      reverse
        [ [541, 548, 560, 559, 546, 562, 548, 564],
          [569, 569, 559, 562, 567, 559, 553, 545],
          [559, 555, 556, 568, 555, 552, 546, 541],
          [564, 575, 552, 558, 551, 548, 528, 538],
          [537, 565, 544, 543, 528, 540, 532, 510],
          [546, 539, 520, 517, 521, 507, 499, 526],
          [526, 508, 511, 503, 511, 537, 509, 508],
          [532, 531, 535, 527, 517, 538, 542, 521]
        ]

queenEPST :: Vector Int
queenEPST =
  V.fromList $
    concat $
      reverse
        [ [1006, 1028, 1025, 1035, 1047, 1031, 1040, 1028],
          [989, 1039, 1039, 1053, 1060, 1059, 1020, 1038],
          [1001, 1004, 1023, 1045, 1029, 1025, 1031, 1040],
          [1010, 1039, 1017, 1051, 1042, 1018, 1046, 1058],
          [1027, 1021, 1019, 1023, 1018, 984, 1055, 1034],
          [1036, 982, 1004, 996, 982, 981, 982, 1007],
          [1015, 984, 986, 981, 966, 953, 987, 995],
          [997, 985, 988, 969, 974, 965, 985, 994]
        ]

kingEPST :: Vector Int
kingEPST =
  V.fromList $
    concat $
      reverse
        [ [-16, 5, -11, 26, 32, 37, 34, -9],
          [22, 18, 15, 23, 28, 34, 54, 55],
          [32, 36, 43, 45, 48, 56, 49, 65],
          [13, 29, 37, 45, 49, 49, 47, 40],
          [-10, 18, 24, 27, 37, 29, 14, 16],
          [7, 10, 9, 22, 28, 21, -3, -3],
          [-14, -16, 4, 0, 20, 10, -17, -16],
          [-22, -47, -7, 3, -51, 7, -29, -48]
        ]

mpsts :: Vector Int
mpsts = V.concat [pawnMPST, knightMPST, bishopMPST, rookMPST, queenMPST, kingMPST]

epsts :: Vector Int
epsts = V.concat [pawnEPST, knightEPST, bishopEPST, rookEPST, queenEPST, kingEPST]

pstEval :: Bitboard -> PieceType -> Int -> Int -> Int -> Int
pstEval bb piece !mgPhase !egPhase !mask =
  foldSqs
    ( \score sqRaw ->
        let sq = sqRaw .^. mask
            m = mpsts `V.unsafeIndex` (pieceOffset + sq)
            e = epsts `V.unsafeIndex` (pieceOffset + sq)
         in score + (m * mgPhase + e * egPhase) `quot` 24
    )
    0
    bb
  where
    pieceOffset = fromEnum piece * 64
{-# INLINE pstEval #-}
