module Trout.Search.PieceSquareTables
  ( pawnMPST,
    pawnEPST,
    knightMPST,
    knightEPST,
    bishopMPST,
    bishopEPST,
    rookMPST,
    rookEPST,
    queenMPST,
    queenEPST,
    kingMPST,
    kingEPST,
    pstEval,
  )
where

import Data.Vector.Primitive (Vector)
import Data.Vector.Primitive qualified as V
import Trout.Bitboard (Bitboard, foldSqs, (.^.))
import Trout.Piece (PieceType (..))

pawnMPST :: Vector Int
pawnMPST =
  V.fromList $
    concat $
      reverse
        [ [109, 109, 109, 109, 109, 109, 109, 109],
          [163, 155, 187, 186, 157, 156, 126, 137],
          [56, 131, 129, 131, 86, 176, 106, 72],
          [52, 50, 92, 78, 78, 91, 98, 61],
          [73, 71, 86, 93, 91, 94, 86, 57],
          [68, 62, 66, 75, 83, 94, 115, 76],
          [65, 66, 66, 59, 65, 99, 128, 64],
          [109, 109, 109, 109, 109, 109, 109, 109]
        ]

knightMPST :: Vector Int
knightMPST =
  V.fromList $
    concat $
      reverse
        [ [276, 322, 329, 325, 328, 333, 322, 277],
          [320, 300, 332, 313, 334, 354, 315, 336],
          [341, 350, 365, 370, 392, 387, 320, 334],
          [343, 318, 345, 366, 336, 358, 320, 323],
          [319, 329, 329, 322, 321, 313, 354, 320],
          [300, 304, 307, 300, 301, 322, 318, 287],
          [335, 316, 294, 333, 325, 351, 236, 320],
          [283, 336, 287, 269, 297, 308, 317, 310]
        ]

bishopMPST :: Vector Int
bishopMPST =
  V.fromList $
    concat $
      reverse
        [ [328, 339, 357, 340, 350, 357, 360, 366],
          [343, 357, 352, 372, 361, 340, 354, 337],
          [327, 364, 317, 374, 353, 420, 333, 367],
          [344, 337, 380, 391, 371, 370, 354, 325],
          [350, 352, 335, 363, 376, 350, 338, 392],
          [375, 372, 375, 356, 354, 380, 370, 346],
          [346, 360, 376, 349, 371, 368, 390, 362],
          [323, 350, 374, 311, 337, 354, 377, 329]
        ]

rookMPST :: Vector Int
rookMPST =
  V.fromList $
    concat $
      reverse
        [ [557, 541, 524, 559, 592, 545, 546, 533],
          [535, 559, 571, 588, 556, 584, 579, 567],
          [554, 550, 557, 547, 574, 594, 568, 570],
          [514, 474, 530, 524, 512, 496, 544, 532],
          [496, 476, 496, 495, 502, 495, 504, 508],
          [470, 489, 510, 500, 501, 510, 539, 484],
          [466, 503, 532, 535, 516, 469, 484, 490],
          [511, 515, 516, 527, 527, 512, 495, 510]
        ]

queenMPST :: Vector Int
queenMPST =
  V.fromList $
    concat $
      reverse
        [ [985, 1005, 1012, 1024, 1022, 1024, 1018, 1011],
          [981, 970, 997, 1007, 1013, 1045, 992, 1041],
          [1006, 1003, 996, 1008, 1048, 1105, 1058, 1023],
          [963, 963, 979, 974, 1008, 1006, 993, 1000],
          [986, 977, 976, 969, 978, 1012, 1001, 1031],
          [991, 1000, 969, 984, 981, 1007, 1025, 1021],
          [996, 1001, 1005, 1010, 1008, 1000, 971, 984],
          [977, 996, 1022, 1026, 1008, 977, 967, 989]
        ]

kingMPST :: Vector Int
kingMPST =
  V.fromList $
    concat $
      reverse
        [ [0, -3, -1, 11, 14, 12, 11, 2],
          [3, -2, 9, 16, 14, 6, 6, 10],
          [0, 9, 6, 5, -10, 0, 9, 11],
          [-6, 10, -8, -11, -16, 4, 18, 14],
          [1, 15, -17, 5, -6, 17, -4, -17],
          [-30, -42, 11, -28, -65, -13, -1, 9],
          [14, 21, -14, -21, -52, -31, 42, 42],
          [37, 39, 17, -41, 47, -42, 71, 48]
        ]

pawnEPST :: Vector Int
pawnEPST =
  V.fromList $
    concat $
      reverse
        [ [109, 109, 109, 109, 109, 109, 109, 109],
          [305, 306, 279, 250, 250, 311, 282, 256],
          [262, 245, 254, 202, 199, 192, 199, 220],
          [195, 164, 151, 146, 129, 119, 145, 155],
          [162, 154, 126, 114, 103, 123, 138, 136],
          [154, 127, 133, 124, 112, 123, 126, 125],
          [143, 138, 127, 103, 114, 114, 111, 113],
          [109, 109, 109, 109, 109, 109, 109, 109]
        ]

knightEPST :: Vector Int
knightEPST =
  V.fromList $
    concat $
      reverse
        [ [278, 310, 312, 332, 315, 349, 304, 286],
          [299, 314, 339, 336, 315, 319, 304, 316],
          [317, 314, 319, 345, 322, 314, 333, 325],
          [318, 348, 327, 335, 346, 326, 325, 321],
          [306, 331, 326, 319, 344, 335, 329, 310],
          [291, 306, 303, 308, 295, 301, 315, 279],
          [298, 271, 296, 291, 295, 254, 281, 276],
          [333, 230, 307, 303, 301, 313, 277, 320]
        ]

bishopEPST :: Vector Int
bishopEPST =
  V.fromList $
    concat $
      reverse
        [ [360, 349, 338, 312, 377, 361, 344, 351],
          [350, 332, 334, 328, 353, 351, 376, 302],
          [339, 335, 358, 337, 327, 356, 339, 358],
          [342, 356, 326, 340, 332, 341, 325, 313],
          [349, 323, 369, 327, 329, 336, 350, 306],
          [319, 329, 318, 317, 340, 336, 343, 325],
          [321, 301, 302, 330, 326, 310, 315, 302],
          [308, 312, 294, 337, 314, 310, 323, 313]
        ]

rookEPST :: Vector Int
rookEPST =
  V.fromList $
    concat $
      reverse
        [ [535, 527, 537, 547, 535, 543, 539, 554],
          [546, 545, 558, 554, 561, 544, 546, 534],
          [540, 530, 540, 558, 542, 534, 531, 525],
          [548, 558, 540, 547, 535, 531, 521, 530],
          [521, 543, 542, 535, 522, 524, 518, 493],
          [538, 525, 512, 506, 514, 503, 491, 515],
          [521, 501, 501, 509, 503, 524, 495, 499],
          [519, 530, 526, 521, 510, 525, 529, 515]
        ]

queenEPST :: Vector Int
queenEPST =
  V.fromList $
    concat $
      reverse
        [ [984, 1012, 1004, 1012, 1021, 1007, 1020, 1007],
          [966, 1018, 1015, 1030, 1037, 1034, 997, 1015],
          [984, 988, 1004, 1026, 1008, 1014, 1011, 1020],
          [991, 1021, 997, 1031, 1026, 994, 1025, 1037],
          [1003, 1000, 996, 1002, 996, 964, 1033, 1016],
          [1016, 961, 982, 972, 965, 961, 964, 990],
          [997, 965, 971, 970, 949, 941, 970, 977],
          [978, 965, 973, 946, 957, 947, 968, 975]
        ]

kingEPST :: Vector Int
kingEPST =
  V.fromList $
    concat $
      reverse
        [ [-14, 7, -12, 26, 33, 38, 35, -8],
          [22, 16, 8, 24, 30, 30, 52, 66],
          [29, 39, 39, 42, 48, 65, 38, 75],
          [14, 32, 42, 52, 50, 46, 41, 36],
          [-10, 25, 28, 30, 33, 19, 8, 19],
          [7, 13, 7, 19, 25, 19, -1, -12],
          [-12, -11, 3, 6, 17, 11, -19, -9],
          [-17, -48, -11, -3, -53, -8, -33, -49]
        ]

mpsts :: Vector Int
mpsts = V.concat [pawnMPST, knightMPST, bishopMPST, rookMPST, queenMPST, kingMPST]

epsts :: Vector Int
epsts = V.concat [pawnEPST, knightEPST, bishopEPST, rookEPST, queenEPST, kingEPST]

pstEval :: Bitboard -> PieceType -> Int -> Int -> Int -> Int
pstEval bb piece !mgPhase !egPhase !mask =
  foldSqs
    ( \score sqRaw ->
        let sq = sqRaw .^. mask
            m = mpsts `V.unsafeIndex` (pieceOffset + sq)
            e = epsts `V.unsafeIndex` (pieceOffset + sq)
         in score + (m * mgPhase + e * egPhase) `quot` 24
    )
    0
    bb
  where
    pieceOffset = fromEnum piece * 64
{-# INLINE pstEval #-}
