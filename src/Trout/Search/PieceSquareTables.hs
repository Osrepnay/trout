module Trout.Search.PieceSquareTables
  ( pawnMPST,
    pawnEPST,
    knightMPST,
    knightEPST,
    bishopMPST,
    bishopEPST,
    rookMPST,
    rookEPST,
    queenMPST,
    queenEPST,
    kingMPST,
    kingEPST,
    pstEval,
  )
where

import Data.Vector.Primitive (Vector)
import Data.Vector.Primitive qualified as V
import Trout.Bitboard (Bitboard, foldSqs, (.^.))
import Trout.Piece (PieceType (..))

pawnMPST :: Vector Int
pawnMPST =
  V.fromList $
    concat $
      reverse
        [ [100, 100, 100, 100, 100, 100, 100, 100],
          [150, 142, 172, 171, 144, 143, 115, 126],
          [52, 120, 118, 120, 79, 162, 97, 66],
          [48, 46, 84, 71, 71, 83, 90, 56],
          [67, 65, 79, 85, 83, 86, 79, 53],
          [62, 57, 60, 69, 76, 86, 106, 70],
          [60, 61, 60, 54, 59, 91, 117, 59],
          [100, 100, 100, 100, 100, 100, 100, 100]
        ]

knightMPST :: Vector Int
knightMPST =
  V.fromList $
    concat $
      reverse
        [ [254, 295, 302, 298, 301, 306, 295, 254],
          [293, 276, 304, 287, 306, 325, 289, 308],
          [313, 321, 334, 339, 360, 355, 293, 307],
          [314, 292, 317, 335, 308, 329, 294, 296],
          [293, 302, 302, 296, 294, 287, 325, 293],
          [275, 279, 281, 275, 276, 296, 292, 263],
          [307, 290, 270, 306, 298, 322, 217, 294],
          [259, 308, 263, 247, 273, 283, 291, 284]
        ]

bishopMPST :: Vector Int
bishopMPST =
  V.fromList $
    concat $
      reverse
        [ [301, 311, 327, 312, 321, 327, 330, 336],
          [315, 327, 323, 341, 331, 312, 325, 309],
          [300, 333, 291, 343, 324, 385, 306, 337],
          [315, 309, 349, 359, 340, 340, 325, 298],
          [321, 323, 307, 333, 345, 321, 310, 360],
          [344, 342, 344, 327, 325, 349, 339, 318],
          [318, 331, 345, 320, 340, 338, 358, 332],
          [296, 321, 343, 285, 309, 324, 346, 301]
        ]

rookMPST :: Vector Int
rookMPST =
  V.fromList $
    concat $
      reverse
        [ [511, 496, 481, 513, 543, 500, 501, 489],
          [491, 513, 524, 539, 510, 536, 531, 520],
          [509, 505, 511, 502, 527, 545, 521, 523],
          [471, 435, 487, 481, 470, 455, 499, 488],
          [455, 436, 455, 454, 461, 454, 463, 466],
          [431, 448, 468, 458, 460, 468, 494, 444],
          [427, 462, 488, 490, 474, 430, 444, 449],
          [469, 472, 473, 484, 483, 470, 454, 468]
        ]

queenMPST :: Vector Int
queenMPST =
  V.fromList $
    concat $
      reverse
        [ [903, 922, 928, 939, 938, 939, 934, 928],
          [900, 890, 915, 923, 930, 958, 910, 955],
          [923, 920, 914, 925, 962, 1014, 970, 938],
          [884, 884, 898, 893, 925, 923, 911, 918],
          [905, 896, 895, 889, 897, 929, 918, 945],
          [909, 917, 889, 903, 900, 924, 940, 937],
          [914, 918, 922, 927, 925, 917, 891, 902],
          [896, 913, 937, 941, 924, 896, 887, 907]
        ]

kingMPST :: Vector Int
kingMPST =
  V.fromList $
    concat $
      reverse
        [ [0, -3, -1, 10, 13, 11, 10, 2],
          [2, -2, 8, 15, 13, 5, 6, 9],
          [0, 8, 6, 5, -9, 0, 8, 10],
          [-5, 9, -8, -10, -15, 3, 16, 12],
          [0, 14, -15, 5, -6, 16, -3, -16],
          [-27, -38, 10, -26, -59, -12, -1, 8],
          [13, 19, -12, -19, -48, -29, 39, 39],
          [34, 36, 15, -38, 43, -39, 65, 44]
        ]

pawnEPST :: Vector Int
pawnEPST =
  V.fromList $
    concat $
      reverse
        [ [100, 100, 100, 100, 100, 100, 100, 100],
          [280, 281, 256, 229, 230, 285, 259, 235],
          [240, 225, 233, 186, 182, 176, 182, 202],
          [179, 150, 138, 134, 119, 109, 133, 142],
          [149, 141, 115, 104, 94, 113, 127, 125],
          [141, 117, 122, 114, 103, 113, 116, 114],
          [132, 126, 117, 95, 104, 105, 101, 104],
          [100, 100, 100, 100, 100, 100, 100, 100]
        ]

knightEPST :: Vector Int
knightEPST =
  V.fromList $
    concat $
      reverse
        [ [255, 284, 286, 305, 289, 320, 279, 263],
          [275, 288, 311, 309, 289, 292, 279, 290],
          [291, 288, 292, 316, 295, 288, 306, 298],
          [291, 319, 300, 307, 317, 299, 298, 295],
          [280, 304, 299, 293, 315, 307, 302, 284],
          [267, 281, 278, 282, 271, 276, 289, 256],
          [274, 248, 271, 267, 271, 233, 258, 254],
          [306, 211, 282, 278, 276, 287, 254, 294]
        ]

bishopEPST :: Vector Int
bishopEPST =
  V.fromList $
    concat $
      reverse
        [ [330, 320, 310, 287, 346, 331, 315, 322],
          [321, 305, 306, 301, 323, 322, 345, 277],
          [311, 307, 329, 309, 300, 327, 311, 329],
          [314, 327, 299, 311, 304, 313, 298, 287],
          [320, 296, 338, 300, 301, 309, 321, 281],
          [293, 302, 292, 291, 312, 309, 315, 298],
          [294, 277, 277, 303, 299, 284, 289, 277],
          [282, 286, 270, 309, 288, 285, 297, 287]
        ]

rookEPST :: Vector Int
rookEPST =
  V.fromList $
    concat $
      reverse
        [ [491, 484, 493, 502, 491, 498, 494, 509],
          [501, 500, 512, 508, 515, 499, 501, 490],
          [496, 486, 496, 512, 498, 490, 487, 482],
          [502, 512, 495, 502, 491, 487, 478, 486],
          [478, 498, 498, 491, 479, 480, 475, 453],
          [494, 481, 469, 464, 472, 461, 450, 472],
          [478, 460, 460, 467, 462, 481, 454, 458],
          [476, 486, 482, 478, 468, 482, 485, 473]
        ]

queenEPST :: Vector Int
queenEPST =
  V.fromList $
    concat $
      reverse
        [ [902, 928, 921, 929, 936, 924, 936, 924],
          [886, 934, 931, 945, 952, 948, 915, 931],
          [903, 907, 921, 941, 924, 930, 928, 936],
          [909, 937, 914, 946, 942, 912, 941, 951],
          [921, 917, 914, 919, 914, 884, 948, 932],
          [932, 882, 901, 892, 885, 882, 884, 908],
          [915, 886, 891, 890, 871, 863, 890, 896],
          [897, 886, 892, 868, 878, 869, 888, 895]
        ]

kingEPST :: Vector Int
kingEPST =
  V.fromList $
    concat $
      reverse
        [ [-12, 6, -11, 24, 31, 35, 32, -7],
          [20, 15, 7, 22, 28, 28, 48, 60],
          [26, 36, 36, 39, 44, 59, 35, 69],
          [13, 30, 38, 47, 46, 42, 38, 33],
          [-9, 23, 26, 28, 31, 17, 7, 17],
          [6, 12, 6, 17, 23, 17, -1, -11],
          [-11, -10, 3, 5, 16, 10, -17, -8],
          [-16, -44, -10, -3, -48, -7, -30, -45]
        ]

mpsts :: Vector Int
mpsts = V.concat [pawnMPST, knightMPST, bishopMPST, rookMPST, queenMPST, kingMPST]

epsts :: Vector Int
epsts = V.concat [pawnEPST, knightEPST, bishopEPST, rookEPST, queenEPST, kingEPST]

pstEval :: Bitboard -> PieceType -> Int -> Int -> Int -> Int
pstEval bb piece !mgPhase !egPhase !mask =
  foldSqs
    ( \score sqRaw ->
        let sq = sqRaw .^. mask
            m = mpsts `V.unsafeIndex` (pieceOffset + sq)
            e = epsts `V.unsafeIndex` (pieceOffset + sq)
         in score + (m * mgPhase + e * egPhase) `quot` 24
    )
    0
    bb
  where
    pieceOffset = fromEnum piece * 64
{-# INLINE pstEval #-}
