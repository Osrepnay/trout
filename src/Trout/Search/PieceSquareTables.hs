module Trout.Search.PieceSquareTables
  ( pawnMPST,
    pawnEPST,
    knightMPST,
    knightEPST,
    bishopMPST,
    bishopEPST,
    rookMPST,
    rookEPST,
    queenMPST,
    queenEPST,
    kingMPST,
    kingEPST,
    pstEval,
  )
where

import Data.Vector.Primitive (Vector)
import Data.Vector.Primitive qualified as V
import Trout.Bitboard (Bitboard, foldSqs, (.^.))
import Trout.Piece (PieceType (..))

pawnMPST :: Vector Int
pawnMPST =
  V.fromList $
    concat $
      reverse $
        [ [100, 100, 100, 100, 100, 100, 100, 100],
          [138, 141, 168, 171, 142, 149, 117, 124],
          [56, 125, 92, 139, 74, 163, 100, 52],
          [54, 65, 85, 87, 90, 84, 76, 77],
          [56, 78, 69, 92, 87, 76, 68, 62],
          [62, 69, 69, 79, 85, 86, 98, 69],
          [62, 72, 62, 73, 85, 86, 98, 64],
          [100, 100, 100, 100, 100, 100, 100, 100]
        ]

knightMPST :: Vector Int
knightMPST =
  V.fromList $
    concat $
      reverse $
        [ [258, 294, 302, 299, 301, 308, 295, 257],
          [292, 275, 305, 283, 304, 324, 291, 311],
          [315, 336, 317, 323, 344, 351, 282, 317],
          [316, 300, 320, 320, 293, 323, 298, 296],
          [283, 288, 292, 299, 291, 279, 309, 298],
          [279, 305, 288, 314, 295, 289, 290, 278],
          [311, 298, 277, 305, 293, 325, 214, 341],
          [263, 303, 256, 242, 284, 284, 300, 288]
        ]

bishopMPST :: Vector Int
bishopMPST =
  V.fromList $
    concat $
      reverse $
        [ [300, 313, 327, 312, 327, 329, 330, 336],
          [333, 342, 323, 343, 328, 311, 331, 304],
          [297, 345, 272, 339, 327, 370, 297, 339],
          [312, 301, 360, 351, 334, 341, 334, 292],
          [322, 336, 311, 339, 337, 325, 296, 354],
          [366, 341, 346, 333, 335, 335, 329, 307],
          [366, 340, 343, 325, 326, 321, 340, 332],
          [294, 313, 348, 283, 310, 319, 361, 304]
        ]

rookMPST :: Vector Int
rookMPST =
  V.fromList $
    concat $
      reverse $
        [ [506, 493, 476, 506, 539, 500, 498, 486],
          [489, 506, 505, 527, 501, 537, 520, 516],
          [520, 515, 515, 501, 520, 550, 517, 520],
          [480, 435, 485, 468, 473, 473, 511, 492],
          [476, 442, 472, 439, 464, 453, 475, 474],
          [433, 455, 493, 473, 466, 485, 503, 454],
          [432, 463, 507, 476, 467, 415, 444, 460],
          [463, 465, 469, 471, 466, 465, 452, 472]
        ]

queenMPST :: Vector Int
queenMPST =
  V.fromList $
    concat $
      reverse $
        [ [905, 929, 921, 939, 934, 937, 932, 921],
          [909, 876, 913, 916, 923, 952, 905, 946],
          [919, 924, 924, 940, 961, 1008, 952, 912],
          [899, 891, 921, 906, 930, 930, 906, 909],
          [910, 902, 878, 891, 896, 924, 913, 935],
          [913, 911, 894, 904, 914, 921, 924, 943],
          [909, 930, 923, 918, 919, 920, 891, 900],
          [896, 916, 929, 933, 928, 895, 889, 907]
        ]

kingMPST :: Vector Int
kingMPST =
  V.fromList $
    concat $
      reverse $
        [ [0, -3, -1, 10, 12, 12, 9, 2],
          [2, -3, 6, 13, 11, 5, 7, 10],
          [-3, 5, 7, 2, -7, 0, 14, 9],
          [-8, 7, -9, -12, -15, 4, 18, 16],
          [-1, 15, -17, 7, -7, 22, -1, -11],
          [-30, -45, 8, -25, -61, -14, 0, 14],
          [9, 9, -15, -13, -40, -3, 22, 9],
          [40, 49, 38, -34, 31, -32, 56, 41]
        ]

pawnEPST :: Vector Int
pawnEPST =
  V.fromList $
    concat $
      reverse $
        [ [100, 100, 100, 100, 100, 100, 100, 100],
          [252, 282, 229, 240, 238, 301, 261, 218],
          [225, 208, 201, 205, 199, 178, 195, 166],
          [155, 149, 131, 134, 129, 118, 137, 133],
          [156, 132, 144, 126, 119, 119, 139, 121],
          [134, 130, 131, 131, 123, 118, 119, 124],
          [128, 128, 128, 107, 104, 112, 114, 109],
          [100, 100, 100, 100, 100, 100, 100, 100]
        ]

knightEPST :: Vector Int
knightEPST =
  V.fromList $
    concat $
      reverse $
        [ [258, 283, 285, 308, 290, 324, 279, 267],
          [273, 294, 332, 308, 284, 298, 280, 296],
          [291, 294, 285, 297, 274, 290, 309, 301],
          [289, 325, 285, 300, 301, 301, 300, 302],
          [276, 296, 290, 292, 297, 290, 301, 312],
          [278, 307, 275, 273, 282, 273, 290, 258],
          [286, 253, 294, 264, 277, 227, 257, 276],
          [318, 214, 277, 282, 294, 304, 264, 297]
        ]

bishopEPST :: Vector Int
bishopEPST =
  V.fromList $
    concat $
      reverse $
        [ [332, 319, 314, 286, 362, 337, 316, 324],
          [329, 323, 301, 297, 328, 315, 354, 272],
          [308, 305, 332, 305, 307, 338, 309, 333],
          [311, 319, 300, 312, 309, 313, 299, 277],
          [321, 305, 336, 300, 295, 319, 311, 282],
          [303, 290, 297, 292, 314, 287, 314, 293],
          [322, 284, 278, 301, 295, 282, 279, 280],
          [281, 284, 293, 312, 292, 279, 316, 293]
        ]

rookEPST :: Vector Int
rookEPST =
  V.fromList $
    concat $
      reverse $
        [ [478, 482, 488, 494, 485, 499, 490, 499],
          [492, 493, 499, 500, 518, 499, 482, 484],
          [498, 485, 493, 510, 500, 490, 483, 481],
          [500, 516, 493, 497, 492, 493, 481, 486],
          [487, 508, 501, 483, 477, 473, 472, 451],
          [497, 477, 466, 469, 475, 452, 450, 478],
          [495, 481, 463, 474, 465, 483, 453, 469],
          [477, 486, 477, 478, 472, 489, 480, 464]
        ]

queenEPST :: Vector Int
queenEPST =
  V.fromList $
    concat $
      reverse $
        [ [902, 935, 911, 928, 928, 921, 934, 919],
          [889, 922, 928, 940, 946, 946, 912, 928],
          [900, 904, 920, 950, 922, 930, 922, 927],
          [913, 933, 916, 948, 943, 907, 940, 944],
          [919, 918, 909, 920, 911, 885, 953, 928],
          [931, 888, 906, 891, 890, 885, 885, 910],
          [915, 889, 890, 902, 865, 866, 891, 896],
          [898, 888, 899, 862, 889, 872, 890, 896]
        ]

kingEPST :: Vector Int
kingEPST =
  V.fromList $
    concat $
      reverse $
        [ [-11, 7, -12, 27, 31, 41, 32, -8],
          [19, 8, 1, 15, 24, 32, 51, 71],
          [15, 17, 39, 27, 55, 68, 70, 69],
          [0, 27, 34, 45, 50, 53, 50, 53],
          [-15, 26, 38, 24, 28, 27, 13, 21],
          [2, 5, 5, 22, 20, 6, -2, 5],
          [-18, -10, -5, -3, 13, 1, -23, -19],
          [-1, -35, -7, -6, -55, -5, -39, -60]
        ]

mpsts :: Vector Int
mpsts = V.concat [pawnMPST, knightMPST, bishopMPST, rookMPST, queenMPST, kingMPST]

epsts :: Vector Int
epsts = V.concat [pawnEPST, knightEPST, bishopEPST, rookEPST, queenEPST, kingEPST]

pstEval :: Bitboard -> PieceType -> Int -> Int -> Int -> Int
pstEval bb piece !mgPhase !egPhase !mask =
  foldSqs
    ( \score sqRaw ->
        let sq = sqRaw .^. mask
            m = mpsts `V.unsafeIndex` (pieceOffset + sq)
            e = epsts `V.unsafeIndex` (pieceOffset + sq)
         in score + (m * mgPhase + e * egPhase) `quot` 24
    )
    0
    bb
  where
    pieceOffset = fromEnum piece * 64
{-# INLINE pstEval #-}
