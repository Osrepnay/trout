module Trout.Search.PieceSquareTables
  ( pawnMPST,
    pawnEPST,
    knightMPST,
    knightEPST,
    bishopMPST,
    bishopEPST,
    rookMPST,
    rookEPST,
    queenMPST,
    queenEPST,
    kingMPST,
    kingEPST,
    pstEval,
  )
where

import Data.Vector.Primitive (Vector)
import Data.Vector.Primitive qualified as V
import Trout.Bitboard (Bitboard, foldSqs, (.^.))
import Trout.Piece (PieceType (..))

pawnMPST :: Vector Int
pawnMPST =
  V.fromList $
    concat $
      reverse
        [ [100, 100, 100, 100, 100, 100, 100, 100],
          [148, 143, 171, 170, 144, 145, 114, 125],
          [52, 124, 123, 115, 72, 170, 97, 59],
          [52, 49, 88, 72, 80, 80, 96, 52],
          [67, 65, 80, 83, 88, 96, 70, 51],
          [55, 64, 58, 84, 70, 95, 105, 70],
          [61, 60, 59, 60, 71, 96, 122, 62],
          [100, 100, 100, 100, 100, 100, 100, 100]
        ]

knightMPST :: Vector Int
knightMPST =
  V.fromList $
    concat $
      reverse
        [ [254, 295, 302, 298, 301, 306, 295, 254],
          [292, 275, 300, 286, 306, 325, 288, 309],
          [314, 319, 330, 335, 356, 354, 292, 308],
          [307, 290, 315, 324, 305, 333, 301, 296],
          [287, 301, 301, 301, 301, 283, 325, 288],
          [271, 280, 284, 278, 275, 301, 293, 261],
          [318, 289, 270, 309, 303, 337, 216, 297],
          [261, 308, 266, 247, 274, 277, 292, 284]
        ]

bishopMPST :: Vector Int
bishopMPST =
  V.fromList $
    concat $
      reverse
        [ [302, 312, 328, 312, 323, 327, 330, 336],
          [321, 328, 328, 342, 333, 311, 324, 308],
          [298, 332, 284, 342, 322, 381, 302, 332],
          [316, 311, 350, 358, 342, 339, 325, 296],
          [318, 323, 309, 331, 344, 325, 309, 371],
          [346, 347, 342, 326, 328, 346, 342, 320],
          [318, 342, 344, 319, 339, 332, 359, 335],
          [298, 320, 349, 284, 311, 329, 347, 301]
        ]

rookMPST :: Vector Int
rookMPST =
  V.fromList $
    concat $
      reverse
        [ [511, 494, 479, 513, 543, 500, 501, 489],
          [493, 513, 521, 539, 507, 533, 529, 518],
          [514, 504, 512, 500, 526, 546, 521, 524],
          [470, 437, 485, 476, 469, 458, 503, 490],
          [464, 435, 457, 453, 458, 457, 466, 468],
          [431, 454, 468, 458, 464, 470, 493, 444],
          [428, 467, 491, 487, 473, 426, 443, 451],
          [463, 473, 469, 481, 476, 462, 456, 465]
        ]

queenMPST :: Vector Int
queenMPST =
  V.fromList $
    concat $
      reverse
        [ [902, 922, 927, 937, 936, 938, 933, 926],
          [898, 887, 913, 923, 932, 959, 907, 952],
          [924, 919, 919, 931, 963, 1016, 969, 935],
          [882, 884, 896, 895, 926, 923, 914, 914],
          [900, 894, 895, 890, 893, 930, 918, 945],
          [913, 916, 893, 901, 899, 927, 937, 945],
          [912, 924, 920, 928, 921, 915, 888, 903],
          [895, 911, 935, 940, 927, 899, 887, 907]
        ]

kingMPST :: Vector Int
kingMPST =
  V.fromList $
    concat $
      reverse
        [ [0, -3, -1, 10, 13, 12, 10, 2],
          [2, -2, 7, 15, 12, 5, 5, 9],
          [0, 9, 5, 5, -8, 0, 7, 10],
          [-5, 10, -6, -9, -14, 3, 16, 13],
          [1, 16, -15, 4, -6, 15, -5, -15],
          [-27, -38, 9, -26, -60, -13, -2, 10],
          [12, 20, -11, -20, -46, -26, 37, 32],
          [36, 37, 16, -39, 42, -38, 67, 43]
        ]

pawnEPST :: Vector Int
pawnEPST =
  V.fromList $
    concat $
      reverse
        [ [100, 100, 100, 100, 100, 100, 100, 100],
          [285, 284, 250, 228, 229, 291, 256, 230],
          [248, 230, 238, 188, 180, 191, 184, 198],
          [173, 151, 143, 131, 124, 113, 133, 136],
          [149, 137, 114, 101, 98, 115, 128, 133],
          [140, 111, 121, 120, 111, 119, 124, 109],
          [136, 128, 113, 97, 97, 100, 99, 96],
          [100, 100, 100, 100, 100, 100, 100, 100]
        ]

knightEPST :: Vector Int
knightEPST =
  V.fromList $
    concat $
      reverse
        [ [255, 285, 287, 305, 288, 321, 279, 263],
          [276, 287, 313, 309, 287, 292, 277, 290],
          [294, 288, 287, 315, 291, 285, 307, 300],
          [290, 322, 298, 300, 318, 304, 293, 296],
          [280, 305, 297, 288, 320, 306, 304, 284],
          [270, 282, 282, 278, 274, 280, 294, 254],
          [282, 247, 272, 261, 269, 234, 257, 255],
          [308, 213, 286, 278, 279, 287, 258, 296]
        ]

bishopEPST :: Vector Int
bishopEPST =
  V.fromList $
    concat $
      reverse
        [ [332, 320, 313, 287, 349, 329, 315, 323],
          [323, 306, 308, 300, 329, 317, 348, 277],
          [309, 303, 334, 307, 296, 330, 312, 325],
          [320, 329, 299, 315, 302, 312, 294, 286],
          [318, 297, 344, 295, 300, 311, 319, 282],
          [292, 300, 293, 291, 312, 303, 315, 303],
          [292, 279, 276, 307, 301, 285, 297, 278],
          [283, 287, 268, 312, 290, 286, 299, 288]
        ]

rookEPST :: Vector Int
rookEPST =
  V.fromList $
    concat $
      reverse
        [ [495, 483, 489, 499, 491, 499, 496, 508],
          [501, 496, 514, 509, 514, 497, 497, 486],
          [497, 484, 497, 513, 495, 489, 486, 482],
          [499, 513, 492, 497, 489, 488, 479, 483],
          [480, 497, 496, 492, 474, 484, 476, 453],
          [492, 486, 468, 460, 471, 461, 448, 472],
          [481, 464, 458, 466, 460, 482, 453, 458],
          [472, 483, 483, 481, 466, 483, 486, 472]
        ]

queenEPST :: Vector Int
queenEPST =
  V.fromList $
    concat $
      reverse
        [ [902, 929, 920, 927, 934, 923, 935, 922],
          [884, 930, 929, 945, 951, 950, 914, 929],
          [902, 905, 924, 945, 925, 931, 927, 935],
          [908, 936, 914, 946, 942, 909, 941, 950],
          [919, 917, 913, 918, 913, 884, 949, 932],
          [933, 881, 902, 892, 884, 883, 885, 911],
          [915, 886, 890, 897, 871, 863, 890, 896],
          [896, 884, 892, 865, 880, 871, 888, 895]
        ]

kingEPST :: Vector Int
kingEPST =
  V.fromList $
    concat $
      reverse
        [ [-11, 7, -10, 24, 32, 37, 33, -7],
          [21, 15, 5, 22, 28, 26, 49, 61],
          [25, 39, 36, 40, 44, 57, 27, 68],
          [13, 32, 44, 49, 47, 39, 32, 34],
          [-8, 30, 31, 25, 25, 11, 4, 18],
          [7, 16, 6, 18, 19, 14, -2, -12],
          [-12, -10, 6, 5, 22, 16, -15, -10],
          [-14, -46, -7, -5, -49, -6, -29, -50]
        ]

mpsts :: Vector Int
mpsts = V.concat [pawnMPST, knightMPST, bishopMPST, rookMPST, queenMPST, kingMPST]

epsts :: Vector Int
epsts = V.concat [pawnEPST, knightEPST, bishopEPST, rookEPST, queenEPST, kingEPST]

pstEval :: Bitboard -> PieceType -> Int -> Int -> Int -> Int
pstEval bb piece !mgPhase !egPhase !mask =
  foldSqs
    ( \score sqRaw ->
        let sq = sqRaw .^. mask
            m = mpsts `V.unsafeIndex` (pieceOffset + sq)
            e = epsts `V.unsafeIndex` (pieceOffset + sq)
         in score + (m * mgPhase + e * egPhase) `quot` 24
    )
    0
    bb
  where
    pieceOffset = fromEnum piece * 64
{-# INLINE pstEval #-}
